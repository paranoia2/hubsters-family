import { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, CommandInteraction } from 'discord.js';
import { getDistube } from '../utils/distube.js';

export const data = new SlashCommandBuilder()
  .setName('play')
  .setDescription('üéµ –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –º—É–∑–∏–∫—É')
  .addStringOption(o => o.setName('query').setDescription('–ù–∞–∑–≤–∞ –∞–±–æ URL').setRequired(true));

export async function execute(interaction: CommandInteraction) {
  const query = interaction.options.getString('query', true);
  const member = interaction.member as any;
  const vc = member?.voice?.channel;
  if (!vc) return interaction.reply({ content: '‚ùå –¢–∏ –º–∞—î—à –±—É—Ç–∏ —É –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—ñ!', ephemeral: true });

  const distube = getDistube();
  await interaction.deferReply();

  distube.play(vc, query, { textChannel: interaction.channel, member: interaction.member });

  const onPlay = async (queue:any, song:any) => {
    try {
      const embed = new EmbedBuilder()
        .setTitle('üé∂ –ó–∞—Ä–∞–∑ –≥—Ä–∞—î')
        .setDescription(`[${song.name}](${song.url})`)
        .addFields(
          { name: '‚åõ –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å', value: song.formattedDuration || 'N/A', inline: true },
          { name: 'üë§ –ê–≤—Ç–æ—Ä', value: song.uploader?.name || 'Unknown', inline: true }
        )
        .setThumbnail(song.thumbnail);

      const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder().setCustomId('pause_btn').setLabel('‚è∏ –ü–∞—É–∑–∞').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('resume_btn').setLabel('‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏').setStyle(ButtonStyle.Success),
        new ButtonBuilder().setCustomId('skip_btn').setLabel('‚è≠ –°–∫—ñ–ø').setStyle(ButtonStyle.Secondary),
        new ButtonBuilder().setCustomId('stop_btn').setLabel('‚èπ –°—Ç–æ–ø').setStyle(ButtonStyle.Danger)
      );

      await interaction.editReply({ content: null, embeds: [embed], components: [row] });
    } catch (e) {
      console.error(e);
    } finally {
      distube.off('playSong', onPlay);
    }
  };

  distube.on('playSong', onPlay);
}
