import { SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder } from 'discord.js';
import { parseDuration } from '../utils/duration.js';

const EMOJI = 'üéâ';

export default {
  data: new SlashCommandBuilder()
    .setName('giveaway')
    .setDescription('–†–æ–∑—ñ–≥—Ä–∞—à—ñ')
    .addSubcommand(sc => sc
      .setName('start')
      .setDescription('–°—Ç–∞—Ä—Ç —Ä–æ–∑—ñ–≥—Ä–∞—à—É')
      .addStringOption(o => o.setName('duration').setDescription('–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–Ω–∞–ø—Ä. 1h30m, 45m, 30s)').setRequired(true))
      .addIntegerOption(o => o.setName('winners').setDescription('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤').setMinValue(1).setMaxValue(10).setRequired(true))
      .addStringOption(o => o.setName('prize').setDescription('–ü—Ä–∏–∑').setRequired(true))
    )
    .addSubcommand(sc => sc
      .setName('reroll')
      .setDescription('–ü–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤')
      .addStringOption(o => o.setName('message_id').setDescription('ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–º').setRequired(true))
      .addIntegerOption(o => o.setName('winners').setDescription('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤').setMinValue(1).setMaxValue(10).setRequired(true))
    )
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageGuild),
  async execute(interaction) {
    if (interaction.options.getSubcommand() === 'start') {
      const durationStr = interaction.options.getString('duration', true);
      const winnersCount = interaction.options.getInteger('winners', true);
      const prize = interaction.options.getString('prize', true);
      const ms = parseDuration(durationStr);
      if (!ms) return interaction.reply({ content: '‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å.', ephemeral: true });
      const end = Date.now() + ms;

      const embed = new EmbedBuilder()
        .setTitle('üéâ –†–æ–∑—ñ–≥—Ä–∞—à!')
        .setDescription(`–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ —Ä–µ–∞–∫—Ü—ñ—é ${EMOJI} —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å.
–ü—Ä–∏–∑: **${prize}**
–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: **${winnersCount}**`)
        .addFields({ name: '–ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è', value: `<t:${Math.floor(end/1000)}:R>` })
        .setFooter({ text: `–ó–∞–ø—É—â–µ–Ω–æ ${interaction.user.tag}` })
        .setTimestamp();

      await interaction.deferReply({ ephemeral: true });
      const msg = await interaction.channel.send({ embeds: [embed] });
      await msg.react(EMOJI);
      await interaction.editReply(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–æ–∑—ñ–≥—Ä–∞—à: ${msg.url}`);

      setTimeout(async () => {
        try {
          const fetched = await msg.fetch();
          const reaction = fetched.reactions.cache.get(EMOJI);
          if (!reaction) return fetched.reply('–ù—ñ—Ö—Ç–æ –Ω–µ –≤–∑—è–≤ —É—á–∞—Å—Ç—ñ.');
          const users = await reaction.users.fetch();
          const entrants = users.filter(u => !u.bot);
          if (entrants.size === 0) return fetched.reply('–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤.');
          const shuffled = entrants.random(winnersCount);
          const winners = Array.isArray(shuffled) ? shuffled : [shuffled];
          await fetched.reply(`üèÜ –ü–µ—Ä–µ–º–æ–∂—Ü—ñ: ${winners.map(w => `<@${w.id}>`).join(', ')} ‚Äî –ü—Ä–∏–∑: **${prize}**`);
        } catch (e) {
          console.error('Giveaway error:', e);
        }
      }, ms);
    } else if (interaction.options.getSubcommand() === 'reroll') {
      const messageId = interaction.options.getString('message_id', true);
      const winnersCount = interaction.options.getInteger('winners', true);
      await interaction.deferReply({ ephemeral: true });
      const msg = await interaction.channel.messages.fetch(messageId).catch(() => null);
      if (!msg) return interaction.editReply('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π—à–æ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
      const reaction = msg.reactions.cache.get(EMOJI);
      if (!reaction) return interaction.editReply('‚ö†Ô∏è –ù–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –Ω–µ–º–∞—î —Ä–µ–∞–∫—Ü—ñ—ó —É—á–∞—Å–Ω–∏–∫—ñ–≤.');
      const users = await reaction.users.fetch();
      const entrants = users.filter(u => !u.bot);
      if (entrants.size === 0) return interaction.editReply('–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤.');
      const shuffled = entrants.random(winnersCount);
      const winners = Array.isArray(shuffled) ? shuffled : [shuffled];
      await interaction.editReply(`üèÜ –ù–æ–≤—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ: ${winners.map(w => `<@${w.id}>`).join(', ')}`);
    }
  }
};
