import { SlashCommandBuilder, PermissionFlagsBits } from 'discord.js';
import { gradientColors } from '../utils/gradient.js';

export default {
  data: new SlashCommandBuilder().setName('gradient').setDescription('–ö–æ–ª—å–æ—Ä–æ–≤—ñ —Ä–æ–ª—ñ-–≥—Ä–∞–¥—ñ—î–Ω—Ç')
    .addSubcommand(sc=>sc.setName('create-roles').setDescription('–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–ª—ñ')
      .addStringOption(o=>o.setName('start_color').setDescription('#ff0000').setRequired(true))
      .addStringOption(o=>o.setName('end_color').setDescription('#0000ff').setRequired(true))
      .addIntegerOption(o=>o.setName('steps').setDescription('2..20').setMinValue(2).setMaxValue(20).setRequired(true))
      .addStringOption(o=>o.setName('prefix').setDescription('–ü—Ä–µ—Ñ—ñ–∫—Å').setRequired(true)))
    .addSubcommand(sc=>sc.setName('apply').setDescription('–í–∏–¥–∞—Ç–∏ –æ–¥–Ω—É –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏—Ö —Ä–æ–ª–µ–π')
      .addUserOption(o=>o.setName('user').setDescription('–ö–æ–º—É').setRequired(true))
      .addStringOption(o=>o.setName('role_name').setDescription('–ù–∞–∑–≤–∞ —Ä–æ–ª—ñ').setRequired(true)))
    .addSubcommand(sc=>sc.setName('cleanup').setDescription('–í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Ä–æ–ª—ñ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º')
      .addStringOption(o=>o.setName('prefix').setDescription('–ü—Ä–µ—Ñ—ñ–∫—Å').setRequired(true)))
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles),
  async execute(interaction){
    const sub = interaction.options.getSubcommand();
    if (sub === 'create-roles') {
      const start = interaction.options.getString('start_color',true);
      const end = interaction.options.getString('end_color',true);
      const steps = interaction.options.getInteger('steps',true);
      const prefix = interaction.options.getString('prefix',true);
      const colors = gradientColors(start,end,steps);
      await interaction.deferReply({ ephemeral: true });
      for (let i=0;i<colors.length;i++){
        await interaction.guild.roles.create({ name: `${prefix}${i+1}`, color: colors[i], reason: 'gradient roles' }).catch(()=>{});
      }
      await interaction.editReply(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${colors.length} —Ä–æ–ª–µ–π –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º **${prefix}**`);
    } else if (sub === 'apply') {
      const user = interaction.options.getUser('user',true);
      const roleName = interaction.options.getString('role_name',true);
      const member = await interaction.guild.members.fetch(user.id);
      const role = interaction.guild.roles.cache.find(r=>r.name === roleName);
      if(!role) return interaction.reply({ content:'–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–ª—å', ephemeral:true });
      await member.roles.add(role).catch(()=>{});
      await interaction.reply(`üé® –í–∏–¥–∞–Ω–æ —Ä–æ–ª—å **${role.name}** –¥–ª—è <@${member.id}>`);
    } else {
      const prefix = interaction.options.getString('prefix',true);
      const toDelete = interaction.guild.roles.cache.filter(r=>r.name.startsWith(prefix));
      for (const r of toDelete.values()){ await r.delete('gradient cleanup').catch(()=>{}); }
      await interaction.reply(`üßπ –í–∏–¥–∞–ª–µ–Ω–æ ${toDelete.size} —Ä–æ–ª–µ–π`);
    }
  }
};
